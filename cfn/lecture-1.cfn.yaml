---
AWSTemplateFormatVersion: "2010-09-09"

Description: "Template for an S3 bucket, DynamoDb Table and Lambda"

Parameters:
  S3BucketName:
    Description: Name of the S3 Bucket.
    Type: String
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
    Default: cipher-monika-dev

  LambdaName:
    Description: Name of the Lambda.
    Type: String
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
    Default: cipher-monika-dev

  LambdaHandlerPath:
    Description: Path of a Lambda Handler.
    Type: String
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.

  DynamoDbTableName:
    Description: HashType PrimaryKey Name
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: "1"
    MaxLength: "2048"
    ConstraintDescription: must contain only alphanumberic characters
    Default: cipher-monika-dev

  DynamoDbHashKeyElementName:
    Description: HashType PrimaryKey Name
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: "1"
    MaxLength: "2048"
    ConstraintDescription: must contain only alphanumberic characters
    Default: PatFamIds

  DynamoDbHashKeyElementType:
    Description: HashType PrimaryKey Type
    Type: String
    Default: S
    AllowedPattern: '[S|N]'
    MinLength: "1"
    MaxLength: "1"
    ConstraintDescription: must be either S or N

  DynamoDbReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: "5"
    MinValue: "5"
    MaxValue: "10000"
    ConstraintDescription: must be between 5 and 10000

  DynamoDbWriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: "10"
    MinValue: "5"
    MaxValue: "10000"
    ConstraintDescription: must be between 5 and 10000

Resources:
  MyBucket:
    Type: AWS:S3:Bucket
    Properties:
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfigurtion:
          - ServerSideEncryptionByDefault
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicAcls: True
      LivecycleConfiguration:
        Rukes:
        - Status: Enabled
          AbortIncompleteMultiPartUpload:
            DaysAfterInitiation: 7
          Transitions:
            - StorageClass: INTELLIGENT_TIERING
              TransitionInDays: 60
          NonConcurrentVersionExpiration:
            NonConcurrentDays: 30
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDbTableName
      AttributeDefinitions:
        - AttributeName: !Ref HashKeyElementName
          AttributeType: !Ref HashKeyElementType
      KeySchema:
        - AttributeName: !Ref HashKeyElementName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${LambdaName}-lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /

  MyLambdaS3Policy:
    Type: AWS::IAM::Role
    Properties:
      PolicyName: s3-policy
    Roles:
      - MyLambdaRole
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            - Fn::GetAtt:
                - MyBucket
                - Arn

  MyLambdaDynamoDbPolicy:
    Type: AWS::IAM::Role
    Properties:
      PolicyName: dynamo-db-policy
    Roles:
      - MyLambdaRole
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            - Fn::GetAtt:
                - MyDynamoDBTable
                - Arn

  MyLambdaCloudwatchLogsPolicy:
    Type: AWS::IAM::Role
    Properties:
      PolicyName: cloudwatch-logs-policy
    Roles:
      - MyLambdaRole
    PolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource:
            - "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      guard:
        SuppressedRules:
          - LAMBDA_INSIDE_VPC
          - LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
    Properties:
      FunctionName: !Sub lambda-function-${EnvName}
      Description: LambdaFunction using python3.12.
      Runtime: python3.13
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              print(json.dumps(event))
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: !Sub ${LambdaHandlerPath}
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LambdaRole.Arn

Outputs:
  DynamoDbTableName:
    Description: Table name of the newly created DynamoDB table
    Value: !Ref MyDynamoDBTable

  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: LambdaRole

  LambdaFunctionName:
    Value: !Ref LambdaFunction

  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub LambdaARN-${EnvName}
